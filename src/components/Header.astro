---
import ThemeToggle from "./ThemeToggle.astro"

const navItems = [
  {
    title: "Programas",
    label: "programas",
    url: "/programas",
  },
  {
    title: "Problemas & Soluciones",
    label: "problemas-soluciones",
    url: "/problemas&soluciones",
  },

  {
    title: "Pro Tips",
    label: "pro-tips",
    url: "/pro-tips",
  },
  {
    title: "Herramientas",
    label: "herramientas",
    url: "/herramientas",
  }
]
---
<header class="fixed top-0 z-10 flex justify-center w-full mx-auto mt-2">
  <nav
    class="overflow-x-auto whitespace-nowrap max-w-full sm:overflow-visible rounded-full bg-white/90 dark:bg-gray-800/90 backdrop-blur-md shadow-[0_3px_10px_rgb(0,0,0,0.2)] text-sm font-medium text-gray-600 dark:text-gray-200 px-3"
  >
    <div class="inline-flex items-center min-w-max">
      <!-- Ícono de inicio -->
      <a href="/" class="mr-2">
        <img class="size-6 dark:invert hover:scale-110 transition-transform" src="home.svg" />
      </a>

      <!-- Links -->
      {
        navItems.map((link) => (
          <a
            class="relative block px-2 py-2 transition hover:text-blue-500 dark:hover:text-blue-500"
            aria-label={link.label}
            href={link.url}
          >
            {link.title}
          </a>
        ))
      }

      <!-- Toggle de tema -->
      <ThemeToggle />
    </div>
  </nav>
</header>


<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500")
            } else {
              item.classList.remove("text-blue-500")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }
</style>

<nav>
  <a href="#Programs">Programas destacados ðŸ‘‘</a>
  <a href="#AllPrograms" id="AllPrograms">Todos los programasðŸš€</a>
  <a href="#UploadProgram">Subir Programa</a>
</nav>

<script>
  // Cargar todos los recursos al cargar la pÃ¡gina
  LoadPrograms();

  const allPrograms = document.querySelector("#AllPrograms");
  allPrograms.addEventListener("click", () => LoadPrograms());

  async function LoadPrograms() {
  try {
    // Realizar una solicitud al backend
    const response = await fetch("http://localhost:1234/get");

    if (!response.ok) {
      throw new Error("Error al obtener los programas");
    }

    // Parsear la respuesta JSON
    const programs = await response.json();

    // Actualizar el contenido del contenedor con los nuevos programas
    document.getElementById("programList").innerHTML = programs
      .map(
        (programa) => `
          <div class="div-container">
            <header>
              <img
                src="${programa.link_de_imagen}"
                alt="${programa.nombre}"
                onerror="this.onerror=null; this.src='https://s3.amazonaws.com/www-inside-design/uploads/2020/10/aspect-ratios-blogpost-1x1-1.png';"
              />
              <h3>
                <a rel="noreferrer" href="${programa.link_de_descarga}">
                  ${programa.nombre}
                </a>
              </h3>
            </header>
            <span>${programa.detalles}</span>
          </div>
        `
      )
      .join("");

    makeStyles();
  } catch (error) {
    console.error("Error al cargar los programas:", error);
  }
}

  // Observar el ancho de la pantalla para hacer un diseÃ±o responsive
  function makeStyles() {
    window.addEventListener("resize", responsive);

    // Llamada incial
    responsive();

    function responsive() {
      // Conseguir el ancho de la pantalla
      const size = window.innerWidth;

      const contenedor = document.querySelector("article.contenedor") as HTMLElement;

      if (size <= 730) {
        // Pantalla menor a 730px
        contenedor.style.gridTemplateColumns = "100%";
      } else if (size <= 1200) {
        // Pantalla menor a 1200px
        contenedor.style.gridTemplateColumns = "50% 50%";
      } else {
        // Pantalla mayor a 1200px
        contenedor.style.gridTemplateColumns = "33.33% 33.33% 33.33%";
      }
    }

    const div_container = programList.querySelectorAll("div"); // CambiÃ© 'ancores' a 'anchors'
    div_container.forEach((div) => {
      div.style.padding = "10px";
    });

    const h2 = document.querySelector("h2");
    h2.style.borderBottom = "2px solid var(--text-gray-color)";
    h2.style.marginBottom = "10px";

    const contenedor = document.querySelector("article.contenedor");
    contenedor.style.display = "grid";
    contenedor.style.gap = "9px 3px";

    const headers = programList.querySelectorAll("header");
    headers.forEach((header) => {
      header.style.display = "flex";
      header.style.gap = "4px";
      header.style.alignItems = "center";
    });

    const images = programList.querySelectorAll("img");
    images.forEach((img) => {
      img.style.height = "32px";
      img.style.width = "auto";
    });

    const anchors = programList.querySelectorAll("a"); // CambiÃ© 'ancores' a 'anchors'
    anchors.forEach((a) => {
      a.style.textDecoration = "none"; // Aplica el estilo a los enlaces
      a.style.color = "unset"; // Define un color especÃ­fico
    });

    const spans = programList.querySelectorAll("span");
    spans.forEach((span) => {
      span.style.marginTop = "5px";
      span.style.color = "var(--text-gray-color)";
      span.style.width = "98%";
      span.style.display = "block";
      span.style.overflowWrap = "break-word";
    });
  }
</script>

<style>
  a {
    display: flex;
    align-items: center;
    font-size: 0.9rem;
    font-weight: bold;
    padding: 6px 14px;
    border-radius: 6px;
    color: var(--text-color);
    background: #fff;
    border: none;
    box-shadow: 0px 0.5px 1px rgba(0, 0, 0, 0.1);
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
    transition: box-shadow 0.3s ease;
    text-decoration: none;

    &:hover {
      box-shadow: 0px 1px 10px 1px rgba(0, 0, 0, 0.2);
      cursor: pointer;
    }
  }
  nav {
    margin-top: 3rem;
    margin-bottom: 4rem;
    display: flex;
    justify-content: space-around;
  }
</style>

---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Subir Programa">
  <main id="UploadProgram" class="mt-12">
    <h1 class="font-bold text-3xl lg:text-6xl text-center">
      Agrega Tus Programas
    </h1>
    <a
      class="help pt-3 absolute lg:fixed text-sm lg:text-2xl"
      target="_blank"
      href="https://n4chos-organization.gitbook.io/soft-share"
      >Ayuda & Documentaci√≥n üìë</a
    >
    <a
      class="pt-3 lg:block absolute lg:fixed text-sm lg:text-2xl"
      target="_blank"
      href="https://n4chos-organization.gitbook.io/soft-share"
      >Ayuda & Documentaci√≥n üìë</a
    >
    <form id="programForm">
      <div class="input-group">
        <input
          type="text"
          id="nombre"
          minlength="2"
          maxlength="20"
          title="Ingresa el nombre de tu soft üöÄ (m√°ximo 20 caracteres)"
          required
        />
        <label for="nombre">Nombre</label>
      </div>

      <div class="input-group">
        <input
          type="text"
          id="link_de_imagen"
          title="Ingresa el link de la imagen que contiene el logo de tu soft üöÄ"
          required
        />
        <label for="link_de_imagen">Link de Imagen</label>
      </div>

      <div class="input-group">
        <input
          type="text"
          id="link_de_descarga"
          name="link_de_descarga"
          title="Ingresa el link directo de descarga de tu soft üöÄ"
          required
        />
        <label for="link_de_descarga">Link de Descarga</label>
      </div>

      <div class="input-group">
        <input
          type="text"
          id="detalles"
          maxlength="80"
          title="Ingresa los detalles de tu soft üöÄ (m√°ximo 80 caracteres)"
          required
        />
        <label for="detalles">Detalles</label>
      </div>

      <section class="display flex flex-col items-center gap-3">
        <a
          class="self-end absolute"
          href="https://n4chos-organization.gitbook.io/soft-share/guias-de-soft-share/quickstart"
          target="_blank"
          no-referrer
          title="Si quieres saber que representa cada categor√≠a, dame click üò∫"
          ><img src="/info.svg" alt="info" class="size-5" /></a
        >
        <h3 class="flex items-center">Categor√≠a</h3>
        <!-- The second value will be selected initially -->
        <select name="select" id="select-categoria">
          <option value="Archivo" selected>Archivo</option>
          <option value="Utilidad">Utilidad</option>
          <option value="Activador">Activador</option>
          <option value="Juego">Juego</option>
          <option value="Media">Media</option>
          <option value="Hardware">Hardware</option>
          <option value="Optimizaci√≥n">Optimizaci√≥n</option>
          <option value="M√∫ltiple">M√∫ltiple</option>
          <option value="Seguridad">Seguridad</option>
          <option value="Gesti√≥n de archivos">Gesti√≥n de archivos</option>
        </select>
      </section>

      <button type="submit" id="black-button">Enviar</button>
    </form>
  </main>
</Layout>

<script type="module">
  import { DATABASE_URL } from "/js/Constantes.js";
  import mostrarExito from "/js/mostrarExito.js";
  import mostrarError from "/js/mostrarError.js";

  // ---------- PASO 1 ---------- //
  document.addEventListener("DOMContentLoaded", function () {
    let categoriaSeleccionada = ["Archivo"];

    const select = document.getElementById("select-categoria");
    select.addEventListener("change", function () {
      const selectedOption = this.options[select.selectedIndex];
      categoriaSeleccionada = [selectedOption.value];
    });
    // Aqu√≠ va tu c√≥digo JavaScript actual
    document
      .getElementById("programForm")
      .addEventListener("submit", async (event) => {
        event.preventDefault(); // Evitar que el formulario recargue la p√°gina
        console.log("me toquetearon üòä (soy el formulario de programas)");

        const submitButton = document.getElementById("black-button");
        submitButton.disabled = true; // Deshabilita el bot√≥n para evitar m√∫ltiples env√≠os

        // Obtener los valores del formulario (Inputs de nombre, imagen, descarga y detalles)
        const nombre = document.getElementById("nombre").value;
        const link_de_imagen = document.getElementById("link_de_imagen").value;
        const link_de_descarga =
          document.getElementById("link_de_descarga").value;
        const detalles = document.getElementById("detalles").value;

        // Obtener los valores del select (Categor√≠a)

        // ---------- PASO 2: Validar URLs ---------- //
        function isValidURL(url) {
          try {
            new URL(url);
            return true; // La URL es v√°lida
          } catch (e) {
            return false; // La URL no es v√°lida
          }
        }

        if (!isValidURL(link_de_descarga) || !isValidURL(link_de_imagen)) {
          mostrarError("No se han ingresado URL v√°lidas.");
          submitButton.disabled = false; // Reactivar el bot√≥n
          return;
        }

        const response = await fetch(`${DATABASE_URL}/get`);
        const dbContent = await response.json(); // Obtener los datos de la base de datos
        const arrayFinal = [];
        dbContent.forEach((object) => {
          for (const key in object) {
            arrayFinal.push(object[key]);
          }
        });

        // Array con los valores ingresados por el usuario
        const userValuesArray = [nombre, link_de_descarga, detalles];

        // ‚òùÔ∏è No se debe poner el valor de categor√≠a selecionada ya que eso si se debe poder repetir.
        // Omiti el valor de imagen ya que algunas imagenes si quiero que se repitan pero como soy un vago, simplemente lo quito de la comprobaci√≥n. üò∫
        // Respuestas correspondientes a cada valor ingresado
        const respuestasDuplicado = [
          "Soft-Share ya tiene un recurso con ese nombre üòµ",
          "Soft-Share ya tiene un recurso con ese link de descarga üòµ",
          "Soft-Share ya tiene un recurso con esos detalles üòµ",
        ];

        // Verificar si alguno de los valores ingresados ya existe en los registros
        for (let i = 0; i < userValuesArray.length; i++) {
          if (arrayFinal.includes(userValuesArray[i])) {
            mostrarError(respuestasDuplicado[i]);
            submitButton.disabled = false; // Reactivar el bot√≥n
            return;
          }
        }

        // ---------- PASO 4: Insertar datos en la base de datos ---------- //
        try {
          console.log(`La categor√≠a seleccionada es ${categoriaSeleccionada}`);
          const response = await fetch(`${DATABASE_URL}/post`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              nombre,
              link_de_imagen,
              link_de_descarga,
              detalles,
              categoriaSeleccionada,
            }),
          });

          if (response.ok) {
            mostrarExito("El programa se ha guardado con √©xito ‚úÖ");
            console.log(response)
            document.getElementById("programForm").reset(); // Limpia el formulario despu√©s del √©xito
          } else {
            mostrarError("Error al guardar el programa.");
          }
        } catch (error) {
          mostrarError("Error al guardar el programa.");
          console.error(error);
        } finally {
          submitButton.disabled = false; // Reactivar el bot√≥n
        }
      });
  });
</script>

<style>
  :root {
    /* FONT */
    --font: "Poppins", sans-serif;

    /* COLORS */
    --bg-color: white;
    --conic-gradient: conic-gradient(
      #ff2e2e,
      #ff831e,
      #fcff51,
      #58ff57,
      #575fff,
      #d257ff,
      #ff57e5,
      #ff1556
    );
  }

  a.help {
    top: 0.5rem;
    left: 0.5rem;
    align-items: center;
    font-weight: bold;
    padding: 6px 14px;
    border-radius: 6px;
    color: var(--text-color);
    border: none;
    box-shadow: 0px 0.5px 1px rgba(0, 0, 0, 0.1);
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
    transition: box-shadow 0.3s ease;
    text-decoration: none;
    backdrop-filter: blur(10px);
    z-index: 1;

    &:hover {
      box-shadow: 0px 1px 10px 1px rgba(0, 0, 0, 0.1);
      text-decoration: underline;
      text-decoration-thickness: 0.1em;
      cursor: pointer;
    }
  }

  main {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-bottom: 40px;
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: "geist";
  }

  .input-group {
    position: relative;
    margin: 20px 0;
  }

  .input-group label {
    position: absolute;
    top: 50%;
    left: 15px;
    transform: translateY(-50%);
    font-size: 16px;
    color: black;
    padding: 0 5px;
    pointer-events: none;
    transition: 0.5s;
  }

  .input-group input {
    width: 100%;
    height: 40px;
    font-size: 16px;
    color: #000;
    padding: 0 15px;
    background: transparent;
    border: 2px solid #ccc;
    outline: none;
    border-radius: 5px;
    transition: all 0.3s ease;

    &:focus {
      border-color: black;
    }
  }

  .input-group input:focus ~ label,
  .input-group input:valid ~ label {
    top: 0;
    font-size: 14px;
    background-color: var(--background-color);
  }

  #black-button {
    height: 2.5em;
    width: 6.5em;
    border-radius: 10px;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    cursor: pointer;
    border: 2px solid black;
    transition:
      transform,
      box-shadow 0.3s ease;
    margin-top: 20px;
    align-self: center;
  }

  #black-button:hover {
    box-shadow: 0px 1px 15px 3px rgba(0, 0, 0, 0.2);
  }

  #black-button::before {
    content: "";
    position: absolute;
    width: 110%;
    height: 350%;
    background: var(--conic-gradient);
  }

  #black-button::after {
    content: "Enviar";
    position: absolute;
    background-color: var(--bg-color);
    width: 95%;
    height: 89%;
    border-radius: 0.4em;
    font-size: 1rem;
    color: black;
    font-weight: bold;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: 0.3s ease;
    z-index: 1;
  }

  #black-button:hover::before {
    animation: spin 1.5s infinite linear;
  }

  @keyframes slidebg {
    to {
      background-position: 20vw;
    }
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  /* Estilar el Select */

  select {
    margin-top: 0.3rem;
    border: 2px solid #ccc;
    border-radius: 4px;
    padding: 2px 5px;
    display: grid;
    grid-template-rows: repeat(10, 1fr);
    grid-auto-flow: column;
    gap: 2px;
    font-weight: bold;
  }
  select option {
    background: rgb(230, 230, 230);
    font-weight: normal;
  }
</style>

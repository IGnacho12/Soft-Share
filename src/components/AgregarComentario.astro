---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Comentarios">
  <main>
    <article>
      <h2 class="flex items-center font-bold text-center">¬°D√©jame un comentario! <img src="/pi√±ata.png" class="size-10" alt=""></h2>
    </article>

    <form id="formularioDeComentario">
      <div class="input-group">
        <input
          type="text"
          id="autor"
          minlength="2"
          maxlength="20"
          title="Da la caraü§ì"
          required
        />
        <label for="nombre">¬øQui√©n eres? üëÄ</label>
      </div>

      <div class="input-group">
        <input
          class="lg:min-w-[30rem] lg:min-h-[5rem]"
          type="text"
          id="comentario"
          title="Dejame tu sugerencia, problema, cr√≠tica o simplemente un saludoü•∞"
          required
        />
        <label for="comentario">T√∫ comentario üßê</label>
      </div>

      <button
        class="font-bold p-0 after:font-bold"
        type="submit"
        id="enviar-comentario"></button>
    </form>
  </main>
</Layout>

<script type="module">
  let horaUltimoComentario = null; // Almacena la hora del √∫ltimo comentario

  document
    .getElementById("enviar-comentario")
    .addEventListener("click", async (event) => {
      event.preventDefault();

      const autor = document.getElementById("autor").value;
      const comentario = document.getElementById("comentario").value;
      const fecha = GetDateARG();
      console.log(fecha);

      // Verificar si han pasado al menos 2 minutos desde el √∫ltimo comentario
      if (!poderComentar()) {
        alert("Debes esperar al menos 2 minutos antes de comentar nuevamente.");
        return;
      }

      const respuesta = await fetch(
        "https://backend-soft-share-1tr9ac9dt-nachos-projects-077bc528.vercel.app/comments",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            autor,
            comentario,
            fecha,
          }),
        }
      );

      cargarComentarios();
      console.log(respuesta);
    });

  function poderComentar() {
    if (!horaUltimoComentario) {
      // Si no hay un √∫ltimo comentario, permitir comentar
      return true;
    }

    const horaActual = new Date(); // Hora actual
    const diferenciaEnMilisegundos = horaActual - horaUltimoComentario; // Diferencia en ms
    const diferenciaenMinutos = diferenciaEnMilisegundos / (1000 * 60); // Convertir a minutos

    return diferenciaenMinutos >= 2; // Permitir si han pasado 2 minutos o m√°s
  }

  function GetDateARG() {
    const fechaFinal = new Date();
    const options = {
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      hour12: true,
    };
    const fechaFormateada = fechaFinal.toLocaleString("en-US", options);

    // Separar fecha y hora para personalizar el formato
    const [datePart, timePart] = fechaFormateada.split(", ");
    const [month, day, year] = datePart.split("/");
    const fechaResultante = `${day}/${month}/${year} ${timePart}`;
    return fechaResultante;
  }

  cargarComentarios();
  async function cargarComentarios() {
    const respuesta = await fetch(
      "https://backend-soft-share-1tr9ac9dt-nachos-projects-077bc528.vercel.app/comments"
    );

    if (!respuesta.ok) {
      throw new Error("Error al obtener los programas");
    }

    // Parsear la respuesta JSON
    const programas = await respuesta.json();

    document.getElementById("commentsSection").innerHTML = programas
      .map(
        (comentario) => `
          <article>
        <div><h3 class="font-bold">${comentario.autor}</h3>
          <span>${comentario.fecha}</span>
        </div>
        
        <p>${comentario.comentario}</p>
      </article>
        `
      )
      .join("");
    ColorParaLosNombres();

    function ColorParaLosNombres() {
      const commentsSection = document.getElementById("commentsSection");

      const colors = [
        "rgba(176, 229, 124, 0.5)", // Verde pastel transparente
        "rgba(108, 155, 207, 0.5)", // Azul pastel transparente
        "rgba(243, 199, 169, 0.5)", // Naranja pastel transparente
        "rgba(193, 163, 224, 0.5)", // Morado pastel transparente
      ];

      const h3 = commentsSection.querySelectorAll("h3");
      h3.forEach((El) => {
        const color = colors[Math.floor(Math.random() * colors.length)];
        El.style.backgroundColor = `${color}`;
      });
    }
  }
</script>
<style>
  :root {
    --bg-color: white;
    --conic-gradient: conic-gradient(
      #ff2e2e,
      #ff831e,
      #fcff51,
      #58ff57,
      #575fff,
      #d257ff,
      #ff57e5,
      #ff1556
    );
  }

  main {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  form {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  input {
    font-family: "geist", "sans serif";
    font-variant-emoji: emoji;
  }

  .input-group {
    position: relative;
    margin: 20px 0;
  }

  .input-group label {
    position: absolute;
    top: 50%;
    left: 15px;
    transform: translateY(-50%);
    font-size: 16px;
    color: black;
    padding: 0 5px;
    pointer-events: none;
    transition: 0.5s;
  }

  .input-group input {
    width: 100%;
    height: 40px;
    font-size: 16px;
    color: #000;
    padding: 0 15px;
    background: transparent;
    border: 2px solid #ccc;
    outline: none;
    border-radius: 5px;
    transition: all 0.3s ease;

    &:focus {
      border-color: black;
    }
  }

  .input-group input:focus ~ label,
  .input-group input:valid ~ label {
    top: 0;
    font-size: 14px;
    background-color: var(--background-color);
  }

  #nombre {
    width: 12rem;
  }

  button {
    height: 2.5em;
    width: 7.5em;
    border-radius: 10px;
    font-weight: bold;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    border: 2px solid black;
    cursor: pointer;
    transition:
      transform,
      box-shadow 0.3s ease;
  }

  button:hover {
    box-shadow: 0px 1px 15px 3px rgba(0, 0, 0, 0.2);
  }

  button::before {
    content: "";
    position: absolute;
    width: 110%;
    height: 350%;
    background: var(--conic-gradient);
  }

  button::after {
    content: "Comentar";
    position: absolute;
    background-color: var(--bg-color);
    width: 95%;
    height: 89%;
    border-radius: 0.4em;
    font-size: 1rem;
    color: black;
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  button:hover::before {
    animation: spin 1.5s infinite linear;
  }

  @keyframes slidebg {
    to {
      background-position: 20vw;
    }
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
</style>
